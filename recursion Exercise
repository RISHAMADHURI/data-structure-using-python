{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMI2KAMkJWy5FF8NxMVBN99"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iY3DaH-n95Dg","executionInfo":{"status":"ok","timestamp":1739813561935,"user_tz":-330,"elapsed":465,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"84d16539-80a2-4468-989b-5bf283eeb3d7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Move disk 1 from A to C\n","Move disk 2 from A to B\n","Move disk 1 from C to B\n","Move disk 3 from A to C\n","Move disk 1 from B to A\n","Move disk 2 from B to C\n","Move disk 1 from A to C\n"]}],"source":["# Recursive function to solve Tower of Hanoi problem\n","def solve_hanoi(n, source, destination, auxiliary):\n","    # Base case: if there's only one disk, move it directly\n","    if n == 1:\n","        print(f\"Move disk 1 from {source} to {destination}\")\n","        return\n","\n","    # Move n-1 disks from source to auxiliary rod\n","    solve_hanoi(n - 1, source, auxiliary, destination)\n","\n","    # Move the nth disk from source to destination rod\n","    print(f\"Move disk {n} from {source} to {destination}\")\n","\n","    # Move n-1 disks from auxiliary rod to destination rod\n","    solve_hanoi(n - 1, auxiliary, destination, source)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Number of disks\n","    num_disks = 3\n","\n","    # Calling the function to solve Tower of Hanoi with source rod 'A', destination rod 'C' and auxiliary rod 'B'\n","    solve_hanoi(num_disks, 'A', 'C', 'B')\n"]},{"cell_type":"code","source":["# Recursive function to find the sum of digits\n","def sum_of_digits(n):\n","    # Base case: if the number is 0, return 0\n","    if n == 0:\n","        return 0\n","    # Recursive case: add the last digit to the sum of the remaining digits\n","    else:\n","        return n % 10 + sum_of_digits(n // 10)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input number\n","    num = int(input(\"Enter a number: \"))\n","\n","    # Calling the recursive function and printing the result\n","    result = sum_of_digits(num)\n","    print(f\"The sum of digits of {num} is: {result}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YDXDIFSh9-F9","executionInfo":{"status":"ok","timestamp":1739813593522,"user_tz":-330,"elapsed":4371,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"e1a4f4c5-4f67-4c75-b44a-9e7d6e48dc18"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 5\n","The sum of digits of 5 is: 5\n"]}]},{"cell_type":"code","source":["# Recursive function to find the GCD of two numbers\n","def gcd(a, b):\n","    # Base case: if one number becomes 0, the other is the GCD\n","    if b == 0:\n","        return a\n","    # Recursive case: GCD of b and the remainder of a divided by b\n","    else:\n","        return gcd(b, a % b)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input two numbers\n","    num1 = int(input(\"Enter the first number: \"))\n","    num2 = int(input(\"Enter the second number: \"))\n","\n","    # Calling the recursive function and printing the result\n","    result = gcd(num1, num2)\n","    print(f\"The GCD of {num1} and {num2} is: {result}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jTJBN7uG-I26","executionInfo":{"status":"ok","timestamp":1739813648048,"user_tz":-330,"elapsed":8371,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"52f13c19-5d23-46a0-efce-32282dc74bf7"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first number: 3\n","Enter the second number: 9\n","The GCD of 3 and 9 is: 3\n"]}]},{"cell_type":"code","source":["# Function to calculate the Fibonacci number at even index\n","def even_fib(n):\n","    if n == 0:\n","        return 0\n","    else:\n","        return odd_fib(n - 1)\n","\n","# Function to calculate the Fibonacci number at odd index\n","def odd_fib(n):\n","    if n == 0:\n","        return 1\n","    else:\n","        return even_fib(n - 1) + odd_fib(n - 1)\n","\n","# Main function to print Fibonacci series\n","if __name__ == \"__main__\":\n","    n = int(input(\"Enter the number of terms: \"))  # Number of terms to print\n","\n","    print(\"Fibonacci series: \", end=\"\")\n","    for i in range(n):\n","        if i % 2 == 0:\n","            print(even_fib(i), end=\" \")\n","        else:\n","            print(odd_fib(i), end=\" \")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c6f2pr5M-VM3","executionInfo":{"status":"ok","timestamp":1739813701830,"user_tz":-330,"elapsed":5897,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"ba8f133d-4f5e-4f56-dbad-72aa8dbef24d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of terms: 4\n","Fibonacci series: 0 1 1 3 "]}]},{"cell_type":"code","source":["# Recursive function to convert decimal to binary\n","def decimal_to_binary(n):\n","    # Base case: if the number is 0 or 1, return the number itself\n","    if n == 0:\n","        return \"\"\n","    else:\n","        # Recursive case: divide the number by 2 and build the binary string\n","        return decimal_to_binary(n // 2) + str(n % 2)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input decimal number\n","    decimal = int(input(\"Enter a decimal number: \"))\n","\n","    # Special case for 0\n","    if decimal == 0:\n","        print(\"The binary equivalent is: 0\")\n","    else:\n","        # Calling the recursive function to convert to binary\n","        binary = decimal_to_binary(decimal)\n","        print(f\"The binary equivalent is: {binary}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ti7896S-i7n","executionInfo":{"status":"ok","timestamp":1739813776846,"user_tz":-330,"elapsed":10009,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"09a4b33a-b6f9-429c-c766-5b1b0d090a6d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a decimal number: 13\n","The binary equivalent is: 1101\n"]}]},{"cell_type":"code","source":["# Recursive function to count the number of zeroes in an integer\n","def count_zeroes(n):\n","    # Base case: if the number is 0, return 1 because 0 contains one zero\n","    if n == 0:\n","        return 1\n","    # Base case: if the number is a single digit, check if it's 0\n","    if n < 10:\n","        return 1 if n == 0 else 0\n","    # Recursive case: check the last digit and then move to the next digit\n","    return (1 if n % 10 == 0 else 0) + count_zeroes(n // 10)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input integer\n","    num = int(input(\"Enter an integer: \"))\n","\n","    # Calling the recursive function to count the zeroes\n","    result = count_zeroes(num)\n","\n","    # Print the result\n","    print(f\"The number of zeroes in {num} is: {result}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t4Oi3yhA-nh1","executionInfo":{"status":"ok","timestamp":1739813818322,"user_tz":-330,"elapsed":12454,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"7cda4250-64c6-4326-9e24-08c59cf9ce70"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter an integer: 102030\n","The number of zeroes in 102030 is: 3\n"]}]},{"cell_type":"code","source":["# Recursive function to find the sum of the first n natural numbers\n","def sum_of_natural_numbers(n):\n","    # Base case: if n is 1, return 1 (the sum of the first 1 natural number)\n","    if n == 1:\n","        return 1\n","    # Recursive case: add the current number to the sum of the previous numbers\n","    return n + sum_of_natural_numbers(n - 1)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input the value of n\n","    n = int(input(\"Enter a number: \"))\n","\n","    # Calling the recursive function to find the sum\n","    result = sum_of_natural_numbers(n)\n","\n","    # Print the result\n","    print(f\"The sum of the first {n} natural numbers is: {result}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"28wSuehM-9xT","executionInfo":{"status":"ok","timestamp":1739813907409,"user_tz":-330,"elapsed":8696,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"4388561b-fe22-4276-8c1a-addd1ffa16c8"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 5\n","The sum of the first 5 natural numbers is: 15\n"]}]},{"cell_type":"code","source":["# Recursive function to count the number of digits in an integer\n","def count_digits(n):\n","    # Base case: if the number is less than 10, it has only one digit\n","    if n < 10 and n >= 0:\n","        return 1\n","    # Base case for negative numbers: make the number positive\n","    if n < 0:\n","        n = -n\n","    # Recursive case: count the digits by reducing the number\n","    return 1 + count_digits(n // 10)\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input integer\n","    num = int(input(\"Enter an integer: \"))\n","\n","    # Calling the recursive function to count the digits\n","    result = count_digits(num)\n","\n","    # Print the result\n","    print(f\"The number of digits in {num} is: {result}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"peTIYsF7_UcH","executionInfo":{"status":"ok","timestamp":1739813955005,"user_tz":-330,"elapsed":16531,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"c6dd1123-6e8e-4374-e8bb-e48507c4359c"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter an integer: 12345\n","The number of digits in 12345 is: 5\n"]}]},{"cell_type":"code","source":["# Recursive function to count the number of odd digits in an integer\n","def count_odd_digits(n):\n","    # Base case: if the number becomes 0, stop recursion\n","    if n == 0:\n","        return 0\n","    # Get the last digit of the number\n","    last_digit = n % 10\n","    # Check if the last digit is odd\n","    if last_digit % 2 != 0:\n","        return 1 + count_odd_digits(n // 10)  # Add 1 if odd, then recurse\n","    else:\n","        return count_odd_digits(n // 10)  # Just recurse if even\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input integer\n","    num = int(input(\"Enter an integer: \"))\n","\n","    # Calling the recursive function to count the odd digits\n","    result = count_odd_digits(num)\n","\n","    # Print the result\n","    print(f\"The number of odd digit\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yq-I3Eip_eJC","executionInfo":{"status":"ok","timestamp":1739814008537,"user_tz":-330,"elapsed":10745,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"a5a02944-c3ee-4be4-fc29-7e74979caa40"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter an integer: 123456\n","The number of odd digit\n"]}]},{"cell_type":"code","source":["# Recursive function to find the length of a string\n","def string_length(s):\n","    # Base case: if the string is empty, its length is 0\n","    if s == \"\":\n","        return 0\n","    # Recursive case: 1 + the length of the remaining string\n","    return 1 + string_length(s[1:])\n","\n","# Main function\n","if __name__ == \"__main__\":\n","    # Input string\n","    string = input(\"Enter a string: \")\n","\n","    # Calling the recursive function to find the length of the string\n","    result = string_length(string)\n","\n","    # Print the result\n","    print(f\"The length of the string is: {result}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3WfqtMMS_osB","executionInfo":{"status":"ok","timestamp":1739814045669,"user_tz":-330,"elapsed":9632,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"c06f314a-7fea-47a8-c368-96ce65e26cce"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a string: Hello\n","The length of the string is: 5\n"]}]},{"cell_type":"code","source":["def count_digits(s):\n","    # Base case: If the string is empty, return 0\n","    if not s:\n","        return 0\n","    # If the first character is a digit, count it and recurse with the rest of the string\n","    elif s[0].isdigit():\n","        return 1 + count_digits(s[1:])\n","    # If the first character is not a digit, just recurse with the rest of the string\n","    else:\n","        return count_digits(s[1:])\n","\n","# Example usage\n","input_string = \"Hello1234\"\n","print(count_digits(input_string))  # Output will\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hca4mTLI_1-G","executionInfo":{"status":"ok","timestamp":1739814076937,"user_tz":-330,"elapsed":453,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"7ac39c7c-c50e-4dd7-a987-e4e3e74bb823"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"code","source":["def reverse_string(s):\n","    # Base case: If the string is empty, return\n","    if not s:\n","        return\n","    # Recursively call the function with the substring excluding the first character\n","    reverse_string(s[1:])\n","    # Print the first character after the recursive call\n","    print(s[0], end='')\n","\n","# Example usage\n","input_string = \"Hello\"\n","reverse_string(input_string)  # Output will be \"olleH\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bqf5AKIW__2c","executionInfo":{"status":"ok","timestamp":1739814159587,"user_tz":-330,"elapsed":564,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"418b0e8e-87bc-4c29-e4c5-af6f110390d8"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["olleH"]}]},{"cell_type":"code","source":["def count_vowels(s):\n","    # Base case: If the string is empty, return 0\n","    if not s:\n","        return 0\n","    # Check if the first character is a vowel\n","    if s[0].lower() in 'aeiou':\n","        return 1 + count_vowels(s[1:])\n","    # If the first character is not a vowel, recurse with the rest of the string\n","    else:\n","        return count_vowels(s[1:])\n","\n","# Example usage\n","input_string\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"g80LpDLLAUAI","executionInfo":{"status":"ok","timestamp":1739814186887,"user_tz":-330,"elapsed":434,"user":{"displayName":"RishaMadhuri Kamal","userId":"15162245689330543671"}},"outputId":"0a6b73d8-ec79-4689-9c0e-0cdaaa1bd4d6"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Hello'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":[],"metadata":{"id":"e757m16ZAasN"},"execution_count":null,"outputs":[]}]}